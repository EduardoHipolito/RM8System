// <auto-generated />
using System;
using Core.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.DataAccess.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Complement")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCity");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdCountry");

                    b.Property<int>("IdPerson");

                    b.Property<int?>("IdState");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Number");

                    b.Property<long?>("PostalCode");

                    b.Property<string>("PublicArea")
                        .IsRequired()
                        .HasMaxLength(130);

                    b.Property<int>("PublicAreaType");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdState");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Domain.Aplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AplicationCode")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdModule");

                    b.Property<int>("Index");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool>("ShowMenu");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdModule", "Index")
                        .IsUnique()
                        .HasName("IX_UniqueAplicationModuleIndex");

                    b.HasIndex("Name", "Description")
                        .IsUnique()
                        .HasName("IX_UniqueAplication");

                    b.ToTable("Aplication");
                });

            modelBuilder.Entity("Core.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdCountry");

                    b.Property<int?>("IdState");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdState");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Core.Domain.Cnae", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCnae");

                    b.ToTable("Cnae");
                });

            modelBuilder.Entity("Core.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int?>("IdMaster");

                    b.Property<int>("IdPerson");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentDay");

                    b.Property<string>("ReducedName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdMaster");

                    b.HasIndex("IdPerson");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Core.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("PhoneCode");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("IX_UniqueCountry");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Core.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdDocumentType");

                    b.Property<int>("IdPerson");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("IdDocumentType");

                    b.HasIndex("IdPerson");

                    b.HasIndex("Value", "IdDocumentType")
                        .IsUnique()
                        .HasName("IX_UniqueDocument");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Core.Domain.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdCountry");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte>("PersonType")
                        .HasMaxLength(30);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("Core.Domain.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("Index");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModuleCode")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Name", "Description")
                        .IsUnique()
                        .HasName("IX_UniqueModule");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Core.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(130);

                    b.Property<string>("HomePage")
                        .HasMaxLength(80);

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasDiscriminator<int>("Type").HasValue(0);
                });

            modelBuilder.Entity("Core.Domain.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaCode");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdCountry");

                    b.Property<int>("IdPerson");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Number");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int>("Type")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdPerson");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Core.Domain.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdCountry");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("Name", "IdCountry")
                        .IsUnique()
                        .HasName("IX_UniqueEstado");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdPerson");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password")
                        .HasMaxLength(64);

                    b.Property<int>("ProfileType")
                        .HasMaxLength(2);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<Guid>("TokenAlteracaoDeSenha");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("Login", "IdPerson")
                        .IsUnique()
                        .HasName("IX_IniqueUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Domain.UserAplicationCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("IdAplication");

                    b.Property<int?>("IdCompany");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int?>("IdUser");

                    b.Property<bool>("IsGlobal");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdAplication", "IdCompany", "IdUser")
                        .IsUnique()
                        .HasName("IX_UniquePermition")
                        .HasFilter("[IdCompany] IS NOT NULL AND [IdUser] IS NOT NULL");

                    b.ToTable("UserAplicationCompany");
                });

            modelBuilder.Entity("Core.Domain.LegalPerson", b =>
                {
                    b.HasBaseType("Core.Domain.Person");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("IdCnae");

                    b.HasIndex("IdCnae");

                    b.ToTable("LegalPerson");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Core.Domain.PhysicalPerson", b =>
                {
                    b.HasBaseType("Core.Domain.Person");


                    b.ToTable("PhysicalPerson");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.HasOne("Core.Domain.City", "FKCity")
                        .WithMany()
                        .HasForeignKey("IdCity");

                    b.HasOne("Core.Domain.Country", "FKCountry")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Person", "FKPerson")
                        .WithMany("Addresses")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.State", "FKState")
                        .WithMany()
                        .HasForeignKey("IdState");
                });

            modelBuilder.Entity("Core.Domain.Aplication", b =>
                {
                    b.HasOne("Core.Domain.Module", "FKModule")
                        .WithMany("Aplications")
                        .HasForeignKey("IdModule")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.City", b =>
                {
                    b.HasOne("Core.Domain.Country", "FKCountry")
                        .WithMany("Cities")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.State", "FKState")
                        .WithMany("Cities")
                        .HasForeignKey("IdState");
                });

            modelBuilder.Entity("Core.Domain.Company", b =>
                {
                    b.HasOne("Core.Domain.Company", "FKMaster")
                        .WithMany("Children")
                        .HasForeignKey("IdMaster");

                    b.HasOne("Core.Domain.LegalPerson", "FKPerson")
                        .WithMany("Companies")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.Document", b =>
                {
                    b.HasOne("Core.Domain.DocumentType", "FKDocumentType")
                        .WithMany()
                        .HasForeignKey("IdDocumentType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Person", "FKPerson")
                        .WithMany("Documents")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.DocumentType", b =>
                {
                    b.HasOne("Core.Domain.Country", "FKCountry")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.Phone", b =>
                {
                    b.HasOne("Core.Domain.Country", "FKCountry")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Person", "FKPerson")
                        .WithMany("Phones")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.State", b =>
                {
                    b.HasOne("Core.Domain.Country", "FKCountry")
                        .WithMany("States")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.HasOne("Core.Domain.PhysicalPerson", "FKPerson")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Domain.UserAplicationCompany", b =>
                {
                    b.HasOne("Core.Domain.Aplication", "FKAplication")
                        .WithMany("Permitions")
                        .HasForeignKey("IdAplication")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Company", "FKCompany")
                        .WithMany("Permitions")
                        .HasForeignKey("IdCompany");

                    b.HasOne("Core.Domain.User", "FKUser")
                        .WithMany("Permitions")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("Core.Domain.LegalPerson", b =>
                {
                    b.HasOne("Core.Domain.Cnae", "FKCnae")
                        .WithMany("LegalPeople")
                        .HasForeignKey("IdCnae");
                });
#pragma warning restore 612, 618
        }
    }
}
