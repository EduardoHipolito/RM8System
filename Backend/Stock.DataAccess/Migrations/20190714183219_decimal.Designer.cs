// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stock.DataAccess;

namespace Stock.DataAccess.Migrations
{
    [DbContext(typeof(StockContext))]
    [Migration("20190714183219_decimal")]
    partial class @decimal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Stock.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .HasMaxLength(130);

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_UniqueCategory");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Stock.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdPhysicalPerson");

                    b.Property<decimal>("Limit");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MoreInformation");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Stock.Domain.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal>("Discount");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int?>("IdSupplier");

                    b.Property<bool>("IsCanceled");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("Shipping");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdSupplier");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Stock.Domain.FormOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("MaxNumberOfInstallments");

                    b.Property<int>("MinNumberOfInstallments");

                    b.Property<decimal>("MinimumValue");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MoreInformation");

                    b.Property<string>("Name");

                    b.Property<decimal>("Rate");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("FormOfPayment");
                });

            modelBuilder.Entity("Stock.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal>("FormOfPaymentRate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdFormOfPayment");

                    b.Property<int>("IdSale");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NSU");

                    b.Property<int>("NumberOfInstallments");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdFormOfPayment");

                    b.HasIndex("IdSale");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Stock.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .IsRequired();

                    b.Property<string>("Brand")
                        .HasMaxLength(30);

                    b.Property<string>("Color")
                        .HasMaxLength(30);

                    b.Property<decimal>("CostPrice");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .HasMaxLength(130);

                    b.Property<int>("IdCategory");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<string>("InternalNumber");

                    b.Property<bool>("IsOwnProduction");

                    b.Property<decimal>("MinPrice");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MoreInformation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Packing")
                        .IsRequired();

                    b.Property<string>("Picture");

                    b.Property<decimal>("Price");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int>("UnityType");

                    b.Property<decimal>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("Name", "Color")
                        .IsUnique()
                        .HasName("IX_UniqueProduct")
                        .HasFilter("[Color] IS NOT NULL");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Stock.Domain.ProductEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal>("ICMS");

                    b.Property<decimal>("IPI");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdEntry");

                    b.Property<int>("IdProduct");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("IdEntry");

                    b.HasIndex("IdProduct");

                    b.ToTable("ProductEntry");
                });

            modelBuilder.Entity("Stock.Domain.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdProduct");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Quantity");

                    b.Property<int?>("SaleId");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("SaleId");

                    b.ToTable("ProductSale");
                });

            modelBuilder.Entity("Stock.Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<decimal>("Discount");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int?>("IdCustomer");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("Shipping");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Stock.Domain.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int?>("IdEntry");

                    b.Property<int>("IdProduct");

                    b.Property<int?>("IdSale");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int?>("StockHitType");

                    b.Property<int>("StockType");

                    b.HasKey("Id");

                    b.HasIndex("IdEntry");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSale");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Stock.Domain.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("IdCompanyPermition");

                    b.Property<int>("IdLegalPerson");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MoreInformation");

                    b.Property<int>("Status")
                        .HasMaxLength(2);

                    b.Property<int>("SupplierType");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Stock.Domain.Entry", b =>
                {
                    b.HasOne("Stock.Domain.Supplier", "FKSupplier")
                        .WithMany()
                        .HasForeignKey("IdSupplier");
                });

            modelBuilder.Entity("Stock.Domain.Payment", b =>
                {
                    b.HasOne("Stock.Domain.FormOfPayment", "FKFormOfPayment")
                        .WithMany()
                        .HasForeignKey("IdFormOfPayment")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stock.Domain.Sale", "FKSale")
                        .WithMany("Payments")
                        .HasForeignKey("IdSale")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stock.Domain.Product", b =>
                {
                    b.HasOne("Stock.Domain.Category", "FKCategory")
                        .WithMany()
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stock.Domain.ProductEntry", b =>
                {
                    b.HasOne("Stock.Domain.Entry", "FKEntry")
                        .WithMany("ProductEntries")
                        .HasForeignKey("IdEntry")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stock.Domain.Product", "FKProduct")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Stock.Domain.ProductSale", b =>
                {
                    b.HasOne("Stock.Domain.Product", "FKProduct")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stock.Domain.Sale")
                        .WithMany("Products")
                        .HasForeignKey("SaleId");
                });

            modelBuilder.Entity("Stock.Domain.Sale", b =>
                {
                    b.HasOne("Stock.Domain.Customer", "FKCustomer")
                        .WithMany()
                        .HasForeignKey("IdCustomer");
                });

            modelBuilder.Entity("Stock.Domain.Stock", b =>
                {
                    b.HasOne("Stock.Domain.Entry", "FKEntry")
                        .WithMany()
                        .HasForeignKey("IdEntry");

                    b.HasOne("Stock.Domain.Product", "FKProduct")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stock.Domain.Sale", "FKSale")
                        .WithMany()
                        .HasForeignKey("IdSale");
                });
#pragma warning restore 612, 618
        }
    }
}
